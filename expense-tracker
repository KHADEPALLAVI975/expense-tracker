#!/usr/bin/env python3

import os 
#import sys
from datetime import datetime, timezone
import csv 
import argparse
import tempfile
import shutil

CSV_PATH = "expense_tracker.csv"

def get_now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()

def create_csv()->None: 
    fields = ["ID", "Date","Description","Amount"]
    with open(CSV_PATH, 'w') as csvfile:
        csvwriter = csv.writer(csvfile) 
        csvwriter.writerow(fields)

def load_csv() -> None:
    if not os.path.exists(CSV_PATH):
        create_csv()

    with open(CSV_PATH, mode='r') as file:
        csv_reader = csv.reader(file)  

        data_list = []  
        for row in csv_reader:
            data_list.append(row)
        
        return data_list    

def genrate_id() -> int :

    existing_ids = set()

    with open(CSV_PATH, 'r', newline='') as file:
        reader = csv.reader(file)
        next(reader)  
        for row in reader:
            try:
                existing_ids.add(int(row[0]))  
            except (ValueError, IndexError):
                continue

    new_id = 1
    while new_id in existing_ids:
        new_id += 1

    return new_id

def list_expense() -> None:
    data = load_csv()
    print(data)
    print("list expense successfully")

def update_expense(id:int,amount:int) -> None:

    temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False, newline='')

    with open(CSV_PATH, 'r', newline='') as infile, temp_file:
        reader = csv.reader(infile)
        header = next(reader)
        writer = csv.writer(temp_file)
        writer.writerow(header)

        for row in reader:
            if int(row[0]) == id:
                # Update the row with new_data
                row[3] = str(amount)
            writer.writerow(row)

    # Replace the original file with the updated temporary file
    shutil.move(temp_file.name, CSV_PATH)
    data = load_csv()
    print(data)
    print("update_expense")

def delete_expense(id:int) -> None:

    temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False, newline='')

    with open(CSV_PATH, 'r', newline='') as infile, temp_file:
        reader = csv.reader(infile)
        #fieldnames = reader.fieldnames
        header = next(reader)
        writer = csv.writer(temp_file)
        writer.writerow(header)

        for row in reader:
            if int(row[0]) == id:
                continue
            writer.writerow(row)

    shutil.move(temp_file.name, CSV_PATH)
    data = load_csv()
    print(data)
    print("delete_expense")

def summary_expense(month=None) -> None:
    if month:
        if month < 0 or month > 12:
            print("invalid month")
        
        total_sum = 0

        with open(CSV_PATH, 'r', newline='') as file:
            reader = csv.reader(file)
            next(reader)  

            for row in reader:
                try:
                    expense_date = datetime.fromisoformat(row[1])
                    if expense_date.month == month:
                        total_sum += int(row[3])
                except (ValueError, IndexError):
                    continue  

        print(f"Total expenses for month {month}: ₹{total_sum}")

    else:
        total_sum = 0 

        data = load_csv()
        with open(CSV_PATH, 'r', newline='') as file:
            reader = csv.reader(file)
            next(reader)
        
            for row in reader :
                total_sum += int(row[3])
    
        print(f"Total expenses:  ₹{total_sum}")
        print("summary_expense")

def add_expense(desc,amount) -> None:
    
    id = genrate_id()
    now = get_now_iso()
    new_row_data = [id , now , desc,amount]
    with open(CSV_PATH ,'a', newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow(new_row_data)
    data = load_csv()
    print(data)
    print("Data added scussfully")

parser = argparse.ArgumentParser(description='expense tracking')

subparsers = parser.add_subparsers(dest='operation', help='Available operations')

add_parser = subparsers.add_parser("add_expense", help="add expense in the sheet")
add_parser.add_argument("--description", type=str)
add_parser.add_argument("--amount", type=int)
add_parser.set_defaults(func=add_expense)

list_parser = subparsers.add_parser("list_expense", help="list expense in the sheet")
list_parser.set_defaults(func=list_expense)

delete_parser = subparsers.add_parser("delete_expense", help="delete expense in the sheet")
delete_parser.add_argument("--id",type=int)
delete_parser.set_defaults(func=delete_expense)

update_parser = subparsers.add_parser("update_expense", help="update expense in the sheet")
update_parser.add_argument("--id",type=int)
update_parser.add_argument("--amount",type=int)
update_parser.set_defaults(func=update_expense)

summary_parser = subparsers.add_parser("summary_expense", help="summary expense in the sheet")
summary_parser.add_argument("--month", type=int)
summary_parser.set_defaults(func=summary_expense)

args = parser.parse_args()   


if args.operation is None:
    parser.print_help()

if hasattr(args, 'func'):
    
    if args.operation == "add_expense":
        args.func(args.description, args.amount)
    if args.operation == "list_expense":
        args.func()
    if args.operation == "delete_expense":
        args.func(args.id)
    if args.operation == "update_expense":
        args.func(args.id,args.amount)
    if args.operation == "summary_expense":
        args.func(args.month)
